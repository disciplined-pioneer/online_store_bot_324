import re
from aiogram import Router, F, types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from ...core.bot import bot
from ...keyboards.user.pick_up_point import *
from ...templates.user.pick_up_point import *
from ...integrations.nominatim.geolocation import get_address_nominatim
from ...utils.user.order import OrderDetailsStates, PHONE_REGEX, CITY_REGEX


router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏
@router.callback_query(F.data.startswith("pickup:"))
async def choice_pickup(callback: types.CallbackQuery, state: FSMContext):

    await state.set_state(None)
    pickup = callback.data.split(':')[1]
    await callback.message.edit_text(
        text=delivery_messages[pickup],
        reply_markup=phone_number_menu
    )
    await state.update_data(pickup=pickup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä"
@router.callback_query(F.data == "enter_phone")
async def enter_phone(callback: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()
    pickup = data.get('pickup')

    await callback.message.edit_text(
        text=enter_phone_messages,
        reply_markup=previous_stepn_keyboard(f'pickup:{pickup}')
    )
    await state.set_state(OrderDetailsStates.phone_number)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(OrderDetailsStates.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):

    # –î–∞–Ω–Ω—ã–µ
    await message.delete()
    data = await state.get_data()
    pickup = data.get('pickup')
    last_id_message = data.get('last_id_message')
    phone = message.text.strip()

    try:
        if not re.match(PHONE_REGEX, phone):
            new_msg = await bot.edit_message_text(
                chat_id=message.from_user.id,
                message_id=last_id_message,
                text=error_phone_message,
                reply_markup=previous_stepn_keyboard(f'pickup:{pickup}')
            )
            await state.update_data(last_id_message=new_msg.message_id)
            return
    except:
        return

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
    await state.update_data(phone_number=phone)

    if pickup == 'ozon':
        
        new_msg = await bot.edit_message_text(
            chat_id=message.from_user.id,
            message_id=last_id_message,
            text='–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è',
            reply_markup=previous_stepn_keyboard(f'enter_phone')
        )
        await state.set_state(OrderDetailsStates.city)
        await state.update_data(last_id_message=new_msg.message_id)

    elif pickup == 'yandex':
        
        new_msg = await message.answer(
            text=f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}.\n–î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ü–í–ó –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
            reply_markup=send_location_menu
        )
        await state.set_state(OrderDetailsStates.geolocation)
        await state.update_data(last_id_message=new_msg.message_id)
        await bot.delete_message(chat_id=message.from_user.id, message_id=last_id_message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–ª–æ–ª–æ–∫–∞—Ü–∏–∏
@router.message(OrderDetailsStates.geolocation)
async def process_geolocation(message: Message, state: FSMContext):

    await message.delete()
    data = await state.get_data()
    last_id_message = data.get('last_id_message')

    location = message.location
    if not location:
        new_msg = await message.answer(
            text="‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ",
            reply_markup=send_location_menu
        )
        await state.update_data(last_id_message=new_msg.message_id)
        await bot.delete_message(chat_id=message.from_user.id, message_id=last_id_message)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    lat, lon = location.latitude, location.longitude
    address_data = await get_address_nominatim(lat, lon)
    if "error" in address_data:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {address_data['error']}")
        return

    city = address_data.get("city") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    street = address_data.get("street") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    house = address_data.get("house") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    user_address = f"{city}, {street}, –¥. {house}"
    new_msg = await message.answer(
        text=f"üìç –í–∞—à –∞–¥—Ä–µ—Å: {user_address}\n\n–ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤",
        reply_markup=await create_edit_geolocation_keyboard(bot)
    )
    await bot.delete_message(chat_id=message.from_user.id, message_id=last_id_message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
    await state.update_data(
        last_id_message=new_msg.message_id,
        geolocation={'city': city, 'street': street, 'house': house}
    )
        

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@router.message(OrderDetailsStates.city)
async def process_city(message: types.Message, state: FSMContext):

    # –î–∞–Ω–Ω—ã–µ
    await message.delete()
    data = await state.get_data()
    last_id_message = data.get('last_id_message')
    city = message.text.strip()

    try:
        if not re.match(CITY_REGEX, city):
            await bot.edit_message_text(
                chat_id=message.from_user.id,
                message_id=last_id_message,
                text="–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π",
                reply_markup=previous_stepn_keyboard(f'enter_phone')
            )
            return
    except:
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.set_state(None)
    await state.update_data(city=city)
    await bot.edit_message_text(
        chat_id=message.from_user.id,
        message_id=last_id_message,
        text=f'–í–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {city}',
        reply_markup=await final_menu_keyb(bot)
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—Å—ë –≤–µ—Ä–Ω–æ"
@router.callback_query(F.data == "everything_correct")
async def everything_correct(callback: types.CallbackQuery, state: FSMContext):
    pass


# –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏
@router.callback_query(F.data.startswith("alternative_back:"))
async def alternative_back(callback: types.CallbackQuery, state: FSMContext):

    await state.set_state(None)
    type_choice = callback.data.split(':')[1]

    if type_choice == 'selection_pick-up_point':
        await callback.message.edit_text(
            text=choose_delivery_method_text,
            reply_markup=delivery_pickup_menu
        )

    elif type_choice == 'choice_city':
        await callback.message.edit_text(
            text='–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è',
            reply_markup=previous_stepn_keyboard(f'enter_phone')
        )
        await state.set_state(OrderDetailsStates.city)