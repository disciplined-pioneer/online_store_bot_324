import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from ...db.models.models import Users
from aiogram.types import CallbackQuery

from ...core.bot import bot
from ...templates.user.commands import hello_user_msg
from ...keyboards.user.commands import start_user_keyb
from ...utils.user.commands import process_start_payload
from ...services.user.commands import save_or_update_user
from ...utils.user.examples import get_media_by_index

from ...templates.admin.commands import hello_admin_msg
from ...keyboards.admin.commands import start_admin_keyb


router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é" - –∫–æ–≥–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
@router.callback_query(F.data == "back_menu")
@router.callback_query(F.data == "back_menu:images")
async def back_buttons_images(callback: types.CallbackQuery, state: FSMContext):

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    await callback.message.delete()
    data = await state.get_data()
    report_id = data.get("report", callback.message.message_id - 90)

    try:
        await bot.delete_messages(
            chat_id=callback.message.chat.id,
            message_ids=list(range(
                max(1, callback.message.message_id - 90, report_id + 1),
                callback.message.message_id + 1
            ))
        )
    except Exception:
        pass

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tg_id = callback.from_user.id
    name = callback.from_user.full_name
    await save_or_update_user(tg_id=tg_id, name=name)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    await process_start_payload(tg_id=tg_id, message=callback.message)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    info_user = await Users.get(tg_id=tg_id)
    role = info_user.role

    # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if role == "admin":
        new_msg = await callback.message.answer(
            text=hello_admin_msg,
            reply_markup=start_admin_keyb
        )

    # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        text = hello_user_msg
        keyboard = await start_user_keyb(bot)

        media, _ = get_media_by_index("additional_images", 1)

        if media:
            try:
                new_msg = await media.send(
                    msg=callback.message,
                    caption=text,
                    reply_markup=keyboard
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                new_msg = await callback.message.answer(text=text, reply_markup=keyboard)
        else:
            new_msg = await callback.message.answer(text=text, reply_markup=keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º state
    await state.update_data(last_id_message=new_msg.message_id)


# –ö–æ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
@router.callback_query(F.data == "support_unavailable")
async def support_unavailable_cb(query: CallbackQuery):
    await query.answer(
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚è≥",
        show_alert=True
    )


# –ö–æ–≥–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
@router.callback_query(F.data == "manager_unavailable")
async def support_unavailable_cb(query: CallbackQuery):
    await query.answer(
        "–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚è≥",
        show_alert=True
    )


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
@router.message()
async def handle_unexpected_message(message: types.Message, state: FSMContext):
    print('üõë –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ üõë')
    await message.delete()    