import os
import qrcode
from pathlib import Path
from aiogram.types import FSInputFile

from aiogram.types import CallbackQuery
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from ...core.bot import bot
from ...keyboards.admin.commands import *
from ...templates.admin.commands import *
from ...db.models.models import Users, ReferralLinks


router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
@router.callback_query(F.data == "users")
async def users(callback: CallbackQuery, state: FSMContext):
    
    await callback.answer()
    df = await Users.get_users_without_orders()

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    output_dir = Path("data/excel")
    output_dir.mkdir(parents=True, exist_ok=True)

    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ ‚Äî –ø–æ tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tg_id = callback.from_user.id
    file_path = output_dir / f"users_{tg_id}.xlsx"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel-—Ñ–∞–π–ª
    df.to_excel(file_path, index=False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    file = FSInputFile(path=file_path, filename=file_path.name)
    await callback.message.answer_document(file, caption="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤")
    await callback.message.delete()

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    try:
        os.remove(file_path)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "QR-–∫–æ–¥"
@router.callback_query(F.data == "qr_code")
async def qr_code(callback: CallbackQuery, state: FSMContext):

    await callback.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=qr_code_keyb
    )


# –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
@router.callback_query(F.data == "form")
async def generate_referral(callback: CallbackQuery, state: FSMContext):
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
    await callback.answer()
    bot_username = (await bot.get_me()).username

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É (–ø–æ–∫–∞ temp)
    new_link = await ReferralLinks.create(referral_link="temp")
    referral_code = str(new_link.id)
    link = f"https://t.me/{bot_username}?start={referral_code}"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    await new_link.update(referral_link=link)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    qr_path = Path(f"data/qrcodes/ref_{callback.from_user.id}.png")
    qr_path.parent.mkdir(parents=True, exist_ok=True)
    qr = qrcode.make(link)
    qr.save(qr_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    file = FSInputFile(qr_path)
    caption = (
        f"üë§ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"{link}\n\n"
        f"üìé QR-–∫–æ–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞"
    )
    await callback.message.answer_photo(photo=file, caption=caption)
    await callback.message.delete()

    # –ß–∏—Å—Ç–∏–º QR-—Ñ–∞–π–ª
    try:
        qr_path.unlink()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å QR-—Ñ–∞–π–ª: {e}")

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°—Ç–∞—Ä—ã–π" —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞
@router.callback_query(F.data == "old")
async def old_referral(callback: CallbackQuery, state: FSMContext):

    await callback.message.edit_text(
        text=await message_ref_links(),
        reply_markup=back_menu_admin
    )